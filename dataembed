#!/bin/bash
#
# dataembed - Embed encoded binary data files in a shell script
#
#    Copyright (C) 2012 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. See <http://www.gnu.org/licenses/gpl.html>
#
# Edit shell scripts, embedding binary data files, base-64 encoded, wrapped
# in a convenient, ready to use function
#
#TODO: --extract to extract all files from output using input files as filter
#TODO: --delete{,-all}, to remove embedded files from output
#TODO: --list, to list embedded files in output, printing name, mode and size
#TODO: --add, to embed files while preserving existing ones (or update)

myname="${0##*/}"
mydir=$(dirname "$(readlink -f "$0")")

#Defaults:
verbose=1
backup=1
inplace=0
list=0
update=1
delete=0
purge=0
ext=".bak"
infiles=()
script=
function="decode"

# Defaults for eclipse install
#infiles=( "$mydir/eclipse.png" "$mydir/eclipse.1.gz" )
#outfile="install"

usage() {
cat <<- USAGE
Usage: $myname [options] [--script=FILE] [--] [INPUTFILE...]
USAGE
if [[ "$1" ]] ; then
	cat >&2 <<- USAGE
	Try '$myname --help' for more information.
	USAGE
	exit 1
fi
cat <<-USAGE

Embed encoded binary data files in a shell script, wrapped as a function

By default prints to sdandard output, unless a script file is given and in-place
editing is selected. Default encoding is Base64 unless -M option is used

Options:
  -h|--help        show this page.
  -v|--verbose     print more details (in stderr)

  -M               uses uuencoding instead of Base 64

  -i|--in-place    directly edit script file instead of outputting to standard
                   output
  --no-backup      disables backup of the output file
  --suffix=SUFFIX  suffix used for backups. Default is "$ext"

  --function=NAME  the name of the function in the wrapper code. Obviously
                   must be a unique function name in the output script.
                   Default is "${function}"

  --script=FILE    script file to embed the encoded data into.

  INPUTFILE...     The data file(s) to embed. If no file, reads from standard
                   input. Default is "${infiles[@]}"

Output format:

 1: ${function}(){
 2:    <function body>
 3: }
 4: # Generated by dataembed - DO NOT EDIT AFTER THIS LINE! ---------------
 5: exit;:
 6: :<<"_EOF_"
 7: <filename>
 6: <encoded data>
 8: _EOF_
 
Lines 6-8 are repeated for each input file given. This wrapper code can be
used in the output script as:

${function} [--find] "myfile" || echo "not found"

It can be piped to another command, redirected to a file or used as a
fd like <($function "myfile"). Other usages, like \$($function) subshells or
<<< heredocs, either to a var or a command, is strongly discouraged
since $function() outputs binary data. If "myname" is not found, $function()
has no output and exits with status code 1. Files read from standard
input have a blank "" name.

Only the block between "$function()" and "}" is rewritten in the output file,
and if such block does not exist, the code is it appended to end of file.
A backup is created by default when editing in place.

Copyright (C) 2012 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
USAGE
exit 0
}

# -------------------------------------------------------------------------
# Option handling

message() { printf "%s\n" "$1" >&2 ; }
skip()    { message "skipping ${2:-$file}${1:+: $1}"; continue ; }
fatal()   { [[ "$1" ]] && message "$myname: error: $1" ; exit ${2:-1} ; }
argerr()  { printf "%s: %s\n" "$myname" "${1:-error}" >&2 ; usage 1 ; }
invalid() { argerr "invalid option: $1" ; }

for arg in "$@"; do case "$arg" in -h|--help) usage ;; esac; done
while (( $# )); do
	case "$1" in
	-v|--verbose  ) verbose=1         ;;
	-i|--in-place ) inplace=1 ;;
	--no-backup   ) backup=0          ;;
	--suffix=*    ) suffix="${1#*=}"  ;;
	--function=*  ) function="${1#*=}";;
	--script=*    ) script="${1#*=}" ;;
	--list        ) list=1            ;;
	--update      ) update=1 ;;
	--delete      ) delete=1 ;;
	--purge       ) purge=1 ;;
	-             ) infiles+=( - ) ;;
	--            ) shift ; break     ;;
	-*            ) invalid "$1"      ;;
	*             ) infiles+=( "$1" ) ;;
	esac
	shift
done
infiles+=( "$@" )

# if no input files, read from stdin
(( ${#infiles[@]} )) || infiles=(-)

# Source script check
if [[ "$script" && "$script" != "-" ]]; then
	# source script, if provided, must be a valid file
	[[ -f "$script" ]] || argerr "'$script' is not a valid file"
else
	# inplace requires an existing script file
	((inplace)) && argerr "in-place editing requires a script file"
fi

# functtion names must have only letters, digits and "_"
[[ "$function" == [[:alnum:]_-]+ ]] &&
	argerr "'$function' is not a valid function name"

# If user-supplied extension is blank, use default
ext=${suffix:-$ext}

# Lets be a good script...
((delete)) && ((purge)) && message "warning: delete is redundant with purge"

# -------------------------------------------------------------------------
# All set, let the show begin...

funcstart="^[[:blank:]]*${function}[[:blank:]]*\\\\(\\\\)"
funcend='^[[:blank:]]*\\}'
header="# Generated by $myname - DO NOT EDIT AFTER THIS LINE! ---------------"
encoder='^exit;:$'
token='_EOF_'
datastart="^:<<\"${token}\"\$"
dataend="^${token}\$"


# easy stuff first... the only read-only command
((list)) && {
	awk -v datastart="$datastart" -v dataend="$dataend" \
	    -v encoder="$encoder" '
		BEGIN { data=0; encoding=0 }
		data && $0 ~ dataend {
			bytes[file] = chars*3/4 - gsub("=", "=", last)
			max = (bytes[file] > max) ? bytes[file] : max
			data=0
			next
		}
		data { chars += length(); last = $0; next }
		encoding && $0 ~ datastart {
			getline
			data=1;
			chars=0
			name[++file] = $0
			next
		}
		$0 ~ encoder {encoding = 1; file = 0; max = 0}
		END {
			pad = length(max"") + int(log(max)/3)
			for (i=1;i<=file;i++)
				printf "%'\''*d %s\n", pad, bytes[i], name[i]
		}
	' "$script"
	exit
}

# all other commands may write to script, so...
if ((inplace)) ; then
	# create tempfile
	tmpfile=$(tempfile -d $(dirname "$script")) ||
		fatal "could not create temporary file"
	trap 'rm -f -- "$tmpfile"' EXIT
	exec 3>"$tmpfile"
else
	# no script file, use stdout
	exec 3>&1
fi

flush(){
	# Close output, backup original, update script file
	exec 3>&-
	((inplace)) && {
		((backup)) && { cp "$script" "${script}${ext}" || fatal ; }
		cat "$tmpfile" > "$script"
	}
	exit
}

# Easy one here...
((purge)) && {
	awk -v funcstart="$funcstart" -v funcend="$funcend" \
	    -v encoder="$encoder" -v header="$header" -v print=1 '
		 print && $0 ~ funcstart {print=0;next}
		!print && $0 ~ funcend   {print=1;next}
		$0 ~ header  {next}
		$0 ~ encoder {exit}
		print        {print}
	' "$script" >&3
	flush
}

unregex(){ sed 's/[$^]//g' <<<"$1" ; }

printfunc(){
#saved for historical reasons
#awk -v f="\$1" 'p&&/${dataend}/{exit}p{print;next}e&&/${datastart}/{getline
#if(\$0==f)p=1}/${encoder}/{e=1}' "\$(readlink -f "\$0")" | base64 -d
cat <<EOF
decode(){
    # Generated by $myname
    # Usage: decode [--find] FILE
    # Feel free to move this function to a more convenient location,
    # and also to remove the comments. Closing } must be on a line of its own
    # This function will only be re-created if deleted
    local s f;while((\$#));do case "\$1" in --find)s=1;; *)f=\$1;;esac;shift;done
    if d=$(awk -v f="\$f" -v p=0 -v e=0 -v s=\$s 'p&&/${dataend}/{exit}p{print;next
    } e&&/${datastart}/{getline;if(\$0==f){p=1;if(s)exit}} /${encoder}/{e=1} END{
    exit !p}' "\$(readlink -f "\$0")");then base64 -d <<<"\$d"; else return 1; fi
}
EOF

# print the rest of file
#[[ "$script" ]] &&
#awk -v funcstart="$funcstart" -v funcend="$funcend" '
#	after {print;next}
#	 block && $0 ~ funcend   {after=1;next}
#	!block && $0 ~ funcstart {block=1}
#' "$script" >&3
}

printheader(){
	# Print until encoded block
	#/^[[:blank:]]*#/ || /^[[:blank:]]*$/ {print;next}
	awk -v funcstart="$funcstart" -v funcend="$funcend" \
	    -v encoder="$encoder" -v header="$header" -v print=1 --lint '
		$0 ~ encoder || $0 ~ header {exit} 1
	' "$script"
	printfunc
	echo "$header"
	unregex "$encoder"
}

printheader >&3

# Loop of input files
for file in "${infiles[@]}"; do

	[[ "${script:--}" == "${file:--}" ]] &&
		skip "bad things may happen if both script and file are stdin"

	name=$(basename "$file") # don't save paths

	unregex "$datastart"
	echo "$name"

	# actual encoder
	base64 "$file" || skip

	unregex "$dataend"

	((verbose)) && message "embedded $file in ${script:--}"
done >&3

flush
